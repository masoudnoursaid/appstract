using ClientSdk.PaymentApi.V1;
using Microsoft.AspNetCore.Mvc;
using Pay.Sample.Asp.Models;
using Payment.Sdk.Service.PayHubClient;

// ReSharper disable All

namespace Pay.Sample.Asp.Controllers;

[ApiController]
public class PaymentApiTest : ControllerBase
{
    private readonly IPayHubClient _payHubClient;

    public PaymentApiTest(IPayHubClient payHubClient)
    {
        _payHubClient = payHubClient;
    }

    [HttpGet]
    [Route("/generate_payment_url")]
    public async Task<IActionResult> Get()
    {
        /*
         * Here, you should initially retrieve all available methods in the hub.
         * With this information, you can establish a connection to the hub and make a payment using a specific payment method.
         */
        var methods = await _payHubClient.GetPaymentMethodList();
        var payPal = methods.Data!.Dtos.Single(m => m.GetWay == SourceImplementedGetWay.Paypal);

        /*
         * All fields are required, so please fill them out carefully.
         * Please ensure that the sum of item prices equals the "Amount" property.
         */
        var payload = new CreatePaymentPayload()
        {
            Items = new List<PaymentItem>()
            {
                new()
                {
                    Currency = "USD",
                    Description = "This is just a mock item - 1",
                    Name = "Item number 1",
                    Price = "1500",
                    Quantity = 1,
                    Sku = $"ITEM-1_{Guid.NewGuid()}"
                },
                new()
                {
                    Currency = "USD",
                    Description = "This is just a mock item - 2",
                    Name = "Item number 2",
                    Price = "500",
                    Quantity = 1,
                    Sku = $"ITEM-2_{Guid.NewGuid()}"
                }
            },
            Amount = 2000,
            Currency = "USD",
            Description = "Description from paypal integration test",
            Email = $"customer.email.{Guid.NewGuid()}@email.com",
            Name = $"customer.name.{Guid.NewGuid()}",
            Mobile = "+447404788642",
            InvoiceNumber = $"INVOICE-NUMBER_{Guid.NewGuid()}",

            //this should be your end point
            ClientRedirectUrl = "https://localhost:7101/redirect",
            //pass webhook address here too
            ClientWebHookUrl = "https://localhost:7101/hook"
        };

        var pay = await _payHubClient.Pay(payload, payPal.Id /*or any other method id*/);

        // Here is pay url, you should redirect user to this url
        var payUrl = pay.Data!.PaymentUrl;

        // Here is payment id which generated by pay hub
        var paymentId = pay.Data!.PaymentId;

        // Here provided id which generated by payment method provider
        var providedId = pay.Data!.ProvidedId;

        return Ok(pay);
    }

    [HttpGet]
    [Route("/redirect")]
    public IActionResult RedirectAction(string paymentId, string providedId, string statusTitle, bool successful)
    {
        // here we will redirect user to your redirect url, you shuold nor change anything in your db
        return Ok(new
        {
            paymentId = paymentId,
            providedId = providedId,
            statusTitle = statusTitle,
            successful = successful
        });
    }

    [HttpPost]
    [Route("/hook")]
    public IActionResult HookAction(WebHookNotifyDto dto)
    {
        // with payment id you can query to our database and get anything you need according to the payment
        var paymentId = dto.PaymentId;

        // generated by the provider(like paypal or stripe)
        var providedId = dto.ProvidedId;

        // with invoice number you can check which payment is verifying or rejecting
        var invoiceNumber = dto.InvoiceNumber;

        // just for make sure the total amount which decreased from user bank account is same with what you expected
        var amount = dto.Amount;

        // status & is_successful
        var status = dto.Status;
        var isSuccessful = dto.Successful;
        
        return Ok(dto);
    }
}

